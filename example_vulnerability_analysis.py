#!/usr/bin/env python3
"""
Example Usage of AI-Powered Vulnerability Analysis Agent

This script demonstrates how to use the vulnerability analysis system to:
1. Detect vulnerabilities across all repositories in Neo4j
2. Perform AI-powered impact analysis
3. Generate intelligent remediation recommendations
4. Create comprehensive vulnerability reports

Prerequisites:
- Neo4j database with dependency graph data
- OpenAI API key for AI analysis
- Optional: GitHub, Snyk API tokens for enhanced vulnerability data

Example:
    python example_vulnerability_analysis.py
"""

import os
import sys
import asyncio
from typing import List
from datetime import datetime
from vulnerability_analysis_agent import VulnerabilityAnalysisAgent, VulnerabilitySeverity
from dependency_graph_builder import DependencyGraphBuilder

def check_vulnerability_environment():
    """Check if environment is set up for vulnerability analysis"""
    required_vars = ["NEO4J_URI", "NEO4J_USERNAME", "NEO4J_PASSWORD", "OPENAI_API_KEY"]
    optional_vars = ["GITHUB_PAT", "SNYK_TOKEN"]
    
    missing_required = []
    missing_optional = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_required.append(var)
    
    for var in optional_vars:
        if not os.getenv(var):
            missing_optional.append(var)
    
    if missing_required:
        print("‚ùå Missing required environment variables:")
        for var in missing_required:
            print(f"   - {var}")
        print("\nVulnerability analysis requires these variables.")
        return False
    
    print("‚úÖ Required environment variables are set")
    
    if missing_optional:
        print("‚ö†Ô∏è  Optional environment variables (for enhanced analysis):")
        for var in missing_optional:
            print(f"   - {var} (provides additional vulnerability data)")
    
    return True

async def demonstrate_vulnerability_detection():
    """Demonstrate comprehensive vulnerability detection and analysis"""
    print("\nüîí AI-Powered Vulnerability Analysis Demonstration")
    print("=" * 60)
    
    try:
        # Initialize dependency graph builder
        print("üîß Initializing dependency graph connection...")
        builder = DependencyGraphBuilder()
        
        # Check if we have repositories to analyze
        with builder.driver.session() as session:
            repo_count = session.run("MATCH (f:File) RETURN count(DISTINCT f.repo_name) as count").single()["count"]
            package_count = session.run("MATCH (p:Package) RETURN count(p) as count").single()["count"]
        
        if repo_count == 0:
            print("‚ùå No repositories found in Neo4j database.")
            print("   Please run dependency analysis first using dependency_graph_builder.py")
            return
        
        print(f"üìä Found {repo_count} repositories with {package_count} packages to analyze")
        
        # Initialize vulnerability analysis agent
        print("ü§ñ Initializing AI-powered vulnerability analysis agent...")
        vuln_agent = VulnerabilityAnalysisAgent(builder)
        
        # Show rate limiting status
        print("‚è±Ô∏è  Rate limiting status:")
        for api_name in ['snyk', 'github', 'cve']:
            status = vuln_agent.vuln_db.get_rate_limit_status(api_name)
            print(f"   ‚Ä¢ {api_name}: {status['limit_per_minute']} req/min, {status['limit_per_hour']} req/hour")
        
        # Configure Snyk for more conservative rate limiting if needed
        print("üîß Applying conservative rate limits for Snyk...")
        vuln_agent.vuln_db.configure_rate_limits('snyk', 
                                                 requests_per_minute=30,  # More conservative
                                                 min_delay=2.5)  # Longer delay between requests
        
        # Run vulnerability analysis
        print("\nüîç Starting comprehensive vulnerability analysis...")
        print("   This may take several minutes depending on the number of packages...")
        
        start_time = datetime.now()
        reports = await vuln_agent.analyze_all_repositories()
        analysis_time = datetime.now() - start_time
        
        print(f"‚è±Ô∏è  Analysis completed in {analysis_time}")
        
        if not reports:
            print("‚úÖ Great news! No vulnerabilities found in analyzed repositories.")
            return
        
        # Analyze results
        print(f"\nüìã Vulnerability Analysis Results:")
        print(f"   ‚Ä¢ Total vulnerabilities found: {len(reports)}")
        
        severity_counts = {}
        for severity in VulnerabilitySeverity:
            count = sum(1 for r in reports if r.vulnerability.severity == severity)
            if count > 0:
                severity_counts[severity.value] = count
        
        for severity, count in severity_counts.items():
            icon = "üö®" if severity == "critical" else "‚ö†Ô∏è" if severity == "high" else "üìù"
            print(f"   {icon} {severity.title()}: {count}")
        
        # Show most critical vulnerabilities
        critical_reports = [r for r in reports if r.vulnerability.severity == VulnerabilitySeverity.CRITICAL]
        high_reports = [r for r in reports if r.vulnerability.severity == VulnerabilitySeverity.HIGH]
        
        if critical_reports:
            print(f"\nüö® CRITICAL VULNERABILITIES REQUIRING IMMEDIATE ATTENTION:")
            for i, report in enumerate(critical_reports[:3], 1):
                print(f"   {i}. {report.vulnerability.title}")
                print(f"      Package: {', '.join(report.vulnerability.affected_packages)}")
                print(f"      Repos: {', '.join(report.affected_repositories)}")
                if report.recommended_action:
                    print(f"      Recommended: {report.recommended_action.description}")
                print()
        
        # Show AI analysis examples
        if reports:
            print(f"\nü§ñ AI Analysis Examples:")
            sample_report = reports[0]
            
            print(f"üìÑ Sample Analysis for: {sample_report.vulnerability.title}")
            print(f"   ‚Ä¢ AI Risk Score: {sample_report.impact_analysis.get('ai_risk_score', 'N/A')}")
            print(f"   ‚Ä¢ Urgency: {sample_report.impact_analysis.get('remediation_urgency', 'N/A')}")
            print(f"   ‚Ä¢ Affected Files: {sample_report.impact_analysis.get('impact_radius', 0)}")
            
            if sample_report.recommended_action:
                rec = sample_report.recommended_action
                print(f"   ‚Ä¢ Recommendation: {rec.type.value}")
                print(f"   ‚Ä¢ Confidence: {rec.confidence_score:.1%}")
                print(f"   ‚Ä¢ Compatibility Risk: {rec.compatibility_risk}")
        
        # Generate reports
        print(f"\nüìä Generating Comprehensive Reports...")
        
        # Markdown report
        markdown_report = vuln_agent.generate_comprehensive_report("markdown")
        markdown_filename = f"vulnerability_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(markdown_filename, 'w', encoding='utf-8') as f:
            f.write(markdown_report)
        print(f"   üìù Markdown report: {markdown_filename}")
        
        # JSON report for programmatic access
        json_report = vuln_agent.generate_comprehensive_report("json")
        json_filename = f"vulnerability_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            f.write(json_report)
        print(f"   üìä JSON report: {json_filename}")
        
        # Show remediation summary
        print(f"\nüîß Remediation Summary:")
        all_remediations = []
        for report in reports:
            if report.recommended_action:
                all_remediations.append(report.recommended_action)
        
        if all_remediations:
            # Group by remediation type
            by_type = {}
            for rem in all_remediations:
                type_name = rem.type.value
                if type_name not in by_type:
                    by_type[type_name] = []
                by_type[type_name].append(rem)
            
            for rem_type, rems in by_type.items():
                avg_confidence = sum(r.confidence_score for r in rems) / len(rems)
                print(f"   ‚Ä¢ {rem_type.replace('_', ' ').title()}: {len(rems)} issues (avg confidence: {avg_confidence:.1%})")
        
        # Show next steps
        print(f"\nüéØ Recommended Next Steps:")
        
        if critical_reports:
            print("   1. üö® IMMEDIATE: Address critical vulnerabilities within 24 hours")
            print("      - Review generated remediation steps")
            print("      - Test fixes in development environment")
            print("      - Deploy critical security patches")
        
        if high_reports:
            print("   2. ‚ö†Ô∏è  HIGH PRIORITY: Address high-severity issues within 1 week")
            print("      - Plan remediation sprints")
            print("      - Coordinate with development teams")
        
        print("   3. üìã MONITORING: Set up continuous vulnerability monitoring")
        print("      - Integrate with CI/CD pipelines")
        print("      - Schedule regular vulnerability scans")
        print("      - Monitor security advisories for used packages")
        
        print("   4. üìö DOCUMENTATION: Share reports with security and development teams")
        print(f"      - Review detailed markdown report: {markdown_filename}")
        print("      - Use JSON data for dashboard integration")
        
        # Estimate remediation effort
        total_effort_hours = 0
        effort_mapping = {"low": 2, "medium": 8, "high": 24}
        
        for report in reports:
            if report.recommended_action:
                effort = effort_mapping.get(report.recommended_action.estimated_effort, 8)
                total_effort_hours += effort
        
        if total_effort_hours > 0:
            print(f"\n‚è±Ô∏è  Estimated Total Remediation Effort: {total_effort_hours} hours ({total_effort_hours/8:.1f} person-days)")
        
    except Exception as e:
        print(f"‚ùå Vulnerability analysis failed: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if 'builder' in locals():
            builder.close()

async def demonstrate_specific_package_analysis():
    """Demonstrate focused analysis on a specific package"""
    print("\nüéØ Focused Package Analysis Demonstration")
    print("=" * 50)
    
    # This would be a more targeted analysis
    # For demonstration, we'll show how you could analyze specific packages
    
    target_packages = [
        "express",      # Popular Node.js framework
        "requests",     # Popular Python library
        "lodash",       # Popular JavaScript utility library
        "numpy",        # Popular Python scientific library
    ]
    
    print("üì¶ Target packages for focused analysis:")
    for pkg in target_packages:
        print(f"   ‚Ä¢ {pkg}")
    
    print("\nüí° Note: This would perform deep analysis on specific packages")
    print("   including version compatibility, alternative package suggestions,")
    print("   and detailed remediation strategies tailored to each package.")

def main():
    """Main demonstration function"""
    print("üîí AI-Powered Vulnerability Analysis - Example Usage")
    print("=" * 60)
    
    # Check environment setup
    if not check_vulnerability_environment():
        print("\nüí° To set up the environment:")
        print("   export OPENAI_API_KEY='your-openai-key'")
        print("   export GITHUB_PAT='your-github-token'  # Optional but recommended")
        print("   export SNYK_TOKEN='your-snyk-token'    # Optional")
        sys.exit(1)
    
    # Run demonstrations
    try:
        # Main vulnerability analysis
        asyncio.run(demonstrate_vulnerability_detection())
        
        # Focused analysis example
        asyncio.run(demonstrate_specific_package_analysis())
        
        print("\n" + "=" * 60)
        print("‚úÖ Vulnerability analysis demonstration complete!")
        print("\nKey Features Demonstrated:")
        print("   üîç Multi-source vulnerability detection (CVE, GitHub, Snyk)")
        print("   ü§ñ AI-powered impact analysis and risk assessment")
        print("   üîß Intelligent remediation recommendations")
        print("   üìä Comprehensive reporting in multiple formats")
        print("   üéØ Smart graph traversal for dependency analysis")
        print("   ‚ö° Automated priority assessment and urgency ranking")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Analysis interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Demo failed: {e}")

if __name__ == "__main__":
    main()
